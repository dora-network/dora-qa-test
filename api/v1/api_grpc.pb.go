// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/v1/api.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DoraDevTestService_HealthCheck_FullMethodName = "/api.v1.DoraDevTestService/HealthCheck"
	DoraDevTestService_GetTicks_FullMethodName    = "/api.v1.DoraDevTestService/GetTicks"
)

// DoraDevTestServiceClient is the client API for DoraDevTestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoraDevTestServiceClient interface {
	// HealthCheck is a simple health check endpoint that returns a 200 OK
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// GetTicks is an endpoint that returns a list of ticks for a given symbol
	GetTicks(ctx context.Context, in *GetTicksRequest, opts ...grpc.CallOption) (*GetTicksResponse, error)
}

type doraDevTestServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoraDevTestServiceClient(cc grpc.ClientConnInterface) DoraDevTestServiceClient {
	return &doraDevTestServiceClient{cc}
}

func (c *doraDevTestServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, DoraDevTestService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doraDevTestServiceClient) GetTicks(ctx context.Context, in *GetTicksRequest, opts ...grpc.CallOption) (*GetTicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicksResponse)
	err := c.cc.Invoke(ctx, DoraDevTestService_GetTicks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoraDevTestServiceServer is the server API for DoraDevTestService service.
// All implementations must embed UnimplementedDoraDevTestServiceServer
// for forward compatibility.
type DoraDevTestServiceServer interface {
	// HealthCheck is a simple health check endpoint that returns a 200 OK
	// buf:lint:ignore RPC_REQUEST_STANDARD_NAME
	HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error)
	// GetTicks is an endpoint that returns a list of ticks for a given symbol
	GetTicks(context.Context, *GetTicksRequest) (*GetTicksResponse, error)
	mustEmbedUnimplementedDoraDevTestServiceServer()
}

// UnimplementedDoraDevTestServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDoraDevTestServiceServer struct{}

func (UnimplementedDoraDevTestServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDoraDevTestServiceServer) GetTicks(context.Context, *GetTicksRequest) (*GetTicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicks not implemented")
}
func (UnimplementedDoraDevTestServiceServer) mustEmbedUnimplementedDoraDevTestServiceServer() {}
func (UnimplementedDoraDevTestServiceServer) testEmbeddedByValue()                            {}

// UnsafeDoraDevTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoraDevTestServiceServer will
// result in compilation errors.
type UnsafeDoraDevTestServiceServer interface {
	mustEmbedUnimplementedDoraDevTestServiceServer()
}

func RegisterDoraDevTestServiceServer(s grpc.ServiceRegistrar, srv DoraDevTestServiceServer) {
	// If the following call pancis, it indicates UnimplementedDoraDevTestServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DoraDevTestService_ServiceDesc, srv)
}

func _DoraDevTestService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraDevTestServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraDevTestService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraDevTestServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoraDevTestService_GetTicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoraDevTestServiceServer).GetTicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoraDevTestService_GetTicks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoraDevTestServiceServer).GetTicks(ctx, req.(*GetTicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoraDevTestService_ServiceDesc is the grpc.ServiceDesc for DoraDevTestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoraDevTestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.DoraDevTestService",
	HandlerType: (*DoraDevTestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _DoraDevTestService_HealthCheck_Handler,
		},
		{
			MethodName: "GetTicks",
			Handler:    _DoraDevTestService_GetTicks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}
